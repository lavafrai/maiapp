name: Build KMP iOS App (maiapp)

on:
  # Запускать при пуше в ветку master (или другую)
  push:
    branches: [ master ]
  # Позволяет запускать вручную со страницы Actions в GitHub
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest # Использовать последнюю доступную macOS

    env:
      # Переменные для удобства
      SCHEME_NAME: iosApp
      WORKSPACE_PATH: iosApp/iosApp.xcodeproj/project.xcworkspace
      EXPORT_METHOD: app-store # Метод экспорта (app-store, ad-hoc, etc.)
      OUTPUT_DIR_IOS: iosApp/actions # Директория для архива и IPA
      ARCHIVE_NAME: maiapp.xcarchive

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Общий шаг настройки сборки (Java, secrets.properties)
      - name: Setup common build environment
        uses: ./.github/actions/common-build-setup # Путь к вашему composite action
        with:
          java-version: '17'
          secrets-properties: ${{ secrets.SECRETS_PROPERTIES }}

      # --- Установка зависимостей iOS (CocoaPods) ---
      - name: Set up Ruby for CocoaPods
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0' # Укажите нужную версию Ruby

      - name: Cache CocoaPods dependencies
        uses: actions/cache@v4
        with:
          path: iosApp/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('iosApp/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install CocoaPods dependencies
        run: |
          cd iosApp
          pod install --repo-update

      # --- Сборка Kotlin Multiplatform Framework (УДАЛЕНО) ---
      # Шаги chmod +x gradlew и Build KMP Shared Framework for Xcode УДАЛЕНЫ
      # Xcode сам вызовет Gradle через Build Phases во время архивации

      # --- Настройка подписи кода ---
      - name: Import Apple Certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_P12_KEYSTORE_B64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Import Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.APPLE_P12_KEYSTORE_B64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/"${{ env.SCHEME_NAME }}_profile.mobileprovision"
        env:
          APPLE_PROVISIONING_PROFILE_BASE64: ${{ secrets.APPLE_MOBILEPROVISION_B64 }}

      # --- Создание ExportOptions.plist ---
      - name: Create ExportOptions.plist
        run: |
          cat << EOF > ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>${{ env.EXPORT_METHOD }}</string>
              <key>teamID</key>
              <string>${{ secrets.APPLE_TEAM_ID }}</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>uploadBitcode</key>
              <true/>
              <key>uploadSymbols</key>
              <true/>
              <!-- При manual signing добавьте provisioningProfiles -->
              <!--
              <key>provisioningProfiles</key>
              <dict>
                  <key>ru.lavafrai.maiapp</key> <!-- Замените на ваш Bundle ID -->
                  <string>Имя вашего Provisioning Profile</string>
              </dict>
              -->
          </dict>
          </plist>
          EOF
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # --- Сборка Архива (.xcarchive) ---
      # Теперь этот шаг также отвечает за запуск Gradle через Xcode Build Phases
      - name: Build Xcode Archive
        run: |
          mkdir -p "${{ env.OUTPUT_DIR_IOS }}"
          xcodebuild archive \
            -workspace "${{ env.WORKSPACE_PATH }}" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -sdk iphoneos \
            -configuration Release \
            -archivePath "${{ env.OUTPUT_DIR_IOS }}/${{ env.ARCHIVE_NAME }}"

      # --- Экспорт IPA (.ipa) ---
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath "${{ env.OUTPUT_DIR_IOS }}/${{ env.ARCHIVE_NAME }}" \
            -exportPath "${{ env.OUTPUT_DIR_IOS }}/" \
            -exportOptionsPlist ExportOptions.plist

      # --- Загрузка артефакта ---
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-${{ github.run_number }} # Название артефакта
          path: ${{ env.OUTPUT_DIR_IOS }}/${{ env.SCHEME_NAME }}.ipa
          retention-days: 7 # Хранить артефакт 7 дней