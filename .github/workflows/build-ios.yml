name: Build KMP iOS App (maiapp)

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    env:
      SCHEME_NAME: iosApp
      # !! Используем PROJECT_PATH вместо WORKSPACE_PATH !!
      PROJECT_PATH: iosApp/iosApp.xcodeproj
      EXPORT_METHOD: app-store
      OUTPUT_DIR_IOS: iosApp/actions
      ARCHIVE_NAME: maiapp.xcarchive

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup common build environment
        uses: ./.github/actions/common-build-setup
        with:
          java-version: '17'
          secrets-properties: ${{ secrets.SECRETS_PROPERTIES }}

      # !!! ШАГИ ДЛЯ COCOAPODS УДАЛЕНЫ !!!

      # --- Диагностика (опционально, можно пока закомментировать) ---
      # - name: Show Resolved Build Settings for Release
      #   run: |
      #     echo "--- Dumping ALL Resolved Build Settings for Release ---"
      #     # Используем -project
      #     xcodebuild -project "${{ env.PROJECT_PATH }}" \
      #                -scheme "${{ env.SCHEME_NAME }}" \
      #                -sdk iphoneos \
      #                -configuration Release \
      #                -showBuildSettings
      #     echo "--- End of ALL Build Settings Dump ---"

      # --- Настройка подписи кода ---
      - name: Import Apple Certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_P12_KEYSTORE_B64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Import Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ env.APPLE_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/"${{ env.SCHEME_NAME }}_profile.mobileprovision"
        env:
          APPLE_PROVISIONING_PROFILE_BASE64: ${{ secrets.APPLE_MOBILEPROVISION_B64 }}

      # --- Проверка установленных профилей ---
      - name: List Installed Provisioning Profiles
        run: |
          echo "--- Listing Installed Provisioning Profiles ---"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles
          echo "--- End of Profile Listing ---"

      # --- Создание ExportOptions.plist ---
      - name: Create ExportOptions.plist
        run: |
          # Создаем ExportOptions.plist для автоматической подписи
          cat << EOF > ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>${{ env.EXPORT_METHOD }}</string>
              <key>teamID</key>
              <string>${{ secrets.APPLE_TEAM_ID }}</string>
              # !! Возвращаем automatic, т.к. нет конфликтов от Pods !!
              # !! И убираем manual-секции !!
              <key>signingStyle</key>
              <string>automatic</string>
              <key>uploadBitcode</key>
              <true/>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # --- Сборка Архива (.xcarchive) ---
      - name: Build Xcode Archive
        run: |
          mkdir -p "${{ env.OUTPUT_DIR_IOS }}"
          echo "--- Cleaning Xcode Build Folder ---"
          # Используем -project
          xcodebuild clean \
            -project "${{ env.PROJECT_PATH }}" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration Release
          echo "--- Starting Archive ---"
          # Используем -project. Убрали DEVELOPMENT_TEAM, т.к. automatic signing
          # Настройки подписи теперь должны браться из .xcodeproj без конфликтов
          xcodebuild archive \
            -project "${{ env.PROJECT_PATH }}" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -sdk iphoneos \
            -configuration Release \
            -archivePath "${{ env.OUTPUT_DIR_IOS }}/${{ env.ARCHIVE_NAME }}"

      # --- Экспорт IPA (.ipa) ---
      - name: Export IPA
        run: |
          if [ ! -f ExportOptions.plist ]; then
            echo "ExportOptions.plist not found!"
            exit 1
          fi
          echo "--- Starting IPA Export ---"
          xcodebuild -exportArchive \
            -archivePath "${{ env.OUTPUT_DIR_IOS }}/${{ env.ARCHIVE_NAME }}" \
            -exportPath "${{ env.OUTPUT_DIR_IOS }}/" \
            -exportOptionsPlist ExportOptions.plist

      # --- Загрузка артефакта ---
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-${{ github.run_number }}
          path: ${{ env.OUTPUT_DIR_IOS }}/${{ env.SCHEME_NAME }}.ipa
          retention-days: 7